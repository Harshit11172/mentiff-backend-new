"""
Django settings for mentor_platform project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
import environ 


# Initialize environment variables
env = environ.Env(
    DEBUG=(bool, False)  # set default for DEBUG to False
)




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Reading .env file
environ.Env.read_env(os.path.join(BASE_DIR, '.env'))



print("Base dir is ")
print(BASE_DIR)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!


# SECURITY WARNING: don't run with debug turned on in production!


API_BASE_URL_BACKEND = env('API_BASE_URL_BACKEND')

API_BASE_URL_FRONTEND = env('API_BASE_URL_FRONTEND')



DEBUG = env('DEBUG')
SECRET_KEY = env('SECRET_KEY')
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS')


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',

    'daphne' , 
    'social_django',

    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework.authtoken',
    'users', # apps installed from now below
    'mentorship',
    'chat',
    'voice_video',
    'payments',
    'education',

    'channels', #real-time chat
    'channels_redis',

    #email verification
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'corsheaders',
]




AUTH_USER_MODEL = 'users.CustomUser'


ASGI_APPLICATION = 'mentor_platform.asgi.application'


AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    
    #SSO GOOGLE
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',  # Keep the default Django auth backend
)


MIDDLEWARE = [
    
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
     'allauth.account.middleware.AccountMiddleware',  # Add this line
    
]


ROOT_URLCONF = 'mentor_platform.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mentor_platform.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.getenv('DB_NAME', BASE_DIR / 'db.sqlite3'),  # fallback if env not set
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
# STATIC_URL = '/static/'
# MEDIA_URL = '/media/'
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Assuming 'media' is where your images are stored

MEDIA_URL = 'https://www.api.mentiff.com/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


########################## AUTH FROM CHATGPT

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.AllowAny',
    ],
    
}


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('127.0.0.1', 6379)],  # Adjust if your Redis is hosted differently
        },
    },
}

#email-verification

SITE_ID = 1


# Email backend settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'  # Use Gmail's SMTP server
EMAIL_PORT = 587  # Standard port for TLS
EMAIL_USE_TLS = True  # Enable TLS
DEFAULT_FROM_EMAIL = 'mentiff5@gmail.com'  # Email address used in "From" field
EMAIL_HOST_USER = 'mentiff5@gmail.com'  # Your email address


EMAIL_HOST_PASSWORD = env('EMAIL_HOST_PASSWORD')  # Your email password


ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'  # To require email verification
ACCOUNT_EMAIL_REQUIRED = True  # Require email for signup
ACCOUNT_AUTHENTICATION_METHOD = 'username_email'  # Allow login via username or email
ACCOUNT_USER_MODEL_USERNAME_FIELD = 'username'  # If you have a custom user model
ACCOUNT_USERNAME_REQUIRED = True  # Require username



AGORA_APP_ID = env('AGORA_APP_ID')
# AGORA_APP_CERTIFICATE = '25cc165050ba402c915724cca8392265'  # If using token-based authentication

#using secondary
AGORA_APP_CERTIFICATE = env('AGORA_APP_CERTIFICATE')



# settings.py
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Optional: Ensures sessions expire when the browser is closed
SESSION_COOKIE_AGE = 1209600  # Set session duration (2 weeks)


MEDIA_ROOT = os.path.join(BASE_DIR, 'media')



CORS_ALLOW_ALL_ORIGINS = bool(env('CORS_ALLOW_ALL_ORIGINS'))

if not CORS_ALLOW_ALL_ORIGINS:
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in env('CORS_ALLOWED_ORIGINS').split(',')]


TWILIO_ACCOUNT_SID = env('TWILIO_ACCOUNT_SID')

TWILIO_AUTH_TOKEN = env('TWILIO_AUTH_TOKEN')


RAZORPAY_KEY_ID = env('RAZORPAY_KEY_ID')
RAZORPAY_KEY_SECRET = env('RAZORPAY_KEY_SECRET')

GOOGLE_CLIENT_ID = env('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = env('GOOGLE_CLIENT_SECRET')



BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

GOOGLE_CLIENT_SECRETS_FILE = os.path.join(BASE_DIR, 'client_secrets', 'client_secret.json')
print(GOOGLE_CLIENT_SECRETS_FILE)



from decimal import Decimal

PLATFORM_FEE_PERCENT = Decimal('2.0')   # 10%

SERVICE_CHARGE_PERCENT = Decimal('30.0')  # 5%




